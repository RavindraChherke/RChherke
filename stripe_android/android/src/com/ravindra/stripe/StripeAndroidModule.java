/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.ravindra.stripe;

import java.util.HashMap;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.KrollProxyListener;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.titanium.TiApplication;
import org.appcelerator.titanium.util.TiConvert;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import com.stripe.android.*;
import com.stripe.android.model.*;
import com.stripe.exception.AuthenticationException;

@Kroll.module(name = "StripeAndroid", id = "com.ravindra.stripe")
public class StripeAndroidModule extends KrollModule implements
		KrollProxyListener {

	// Standard Debugging variables
	private static final String LCAT = "StripeAndroidModule";
	private static final boolean DBG = TiConfig.LOGD;

	Stripe stripe = null;
	Card card = null;
	// The JavaScript callbacks (KrollCallback objects)
	private KrollFunction successCallback = null;
	private KrollFunction failureCallback = null;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;

	public StripeAndroidModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}



	@Kroll.method
	public boolean setCard(HashMap propsIn) {
		KrollDict props = new KrollDict(propsIn);

		String cardNumber = null;
		String cvc = null;
		int month = 0;
		int expiryYear = 0;
		
		
		try {
			if (props.containsKey("publishableKey")) {
				stripe = new Stripe(props.getString("publishableKey"));
			}
		} catch (AuthenticationException ex) {
			return false;
		}

		
		if (props.containsKey("cardNumber")) {
			cardNumber = props.getString("cardNumber");
		}

		if (props.containsKey("month")) {
			month = props.getInt("month");
		}

		if (props.containsKey("expiryYear")) {
			expiryYear = props.getInt("expiryYear");
		}

		if (props.containsKey("cvc")) {
			cvc = props.getString("cvc");
		}

		card = new Card(cardNumber, (long) month, (long) expiryYear, cvc);
		
		return true;

	}
	
	@Kroll.method
	public void requestForToken(HashMap args) {
		
		Object callback;
		Log.d(LCAT, "[KROLLDEMO] requestForToken called");

		// Save the callback functions, verifying that they are of the correct
		// type
		if (args.containsKey("success")) {
			callback = args.get("success");
			if (callback instanceof KrollFunction) {
				successCallback = (KrollFunction) callback;
			}
		}

		if (args.containsKey("failure")) {
			callback = args.get("failure");
			if (callback instanceof KrollFunction) {
				failureCallback = (KrollFunction) callback;
			}
		}

		  boolean validation = card.validateCard();
			HashMap<String, String> validationEvent = new HashMap<String, String>();
			
	        if (validation) {
	        
	        	//Send card detail on stripe to get token
	        	stripe.createToken(card, new TokenCallback() {
	    			public void onSuccess(Token token) {
	    				// Send token to your server
	    				if (successCallback != null) {
	    					HashMap<String, String> event = new HashMap<String, String>();
	    					event.put("token", token.getId().toString());

	    					// Fire an event directly to the specified listener
	    					// (callback)
	    					successCallback.call(getKrollObject(), event);
	    				}
	    			}

	    			public void onError(Exception error) {
	    				// Show localized error message
	    				if (successCallback != null) {
	    					HashMap<String, String> event = new HashMap<String, String>();
	    					event.put("error", error.getLocalizedMessage());
	    					// Fire an event directly to the specified listener
	    					// (callback)
	    					failureCallback.call(getKrollObject(), event);
	    				}
	    			}
	    		});
	        	
	        	
	            
	        } else if (!card.validateNumber()) {
	        	validationEvent.put("error", "The card number that you entered is invalid");
	        	failureCallback.call(getKrollObject(), validationEvent);
	        } else if (!card.validateExpiryDate()) {
	        	validationEvent.put("error", "The expiration date that you entered is invalid");
	        	failureCallback.call(getKrollObject(), validationEvent);
	        } else if (!card.validateCVC()) {
	        	validationEvent.put("error", "The CVC code that you entered is invalid");
	        	failureCallback.call(getKrollObject(), validationEvent);
	        } else {
	        	validationEvent.put("error", "The card details that you entered are invalid");
	        	failureCallback.call(getKrollObject(), validationEvent);
	        }
		
	}

}




/*HashMap<String, Object> event = new HashMap<String, Object>();
event.put("id", token.getId());
event.put("created", token.getCreated());
event.put("livemode", token.getLivemode());
event.put("used", token.getUsed());

Card tokenCard=token.getCard();
tokenCard.get

event.put("id", token.getc());
event.put("created", token.getCreated());
event.put("livemode", token.getLivemode());
event.put("used", token.getUsed());*/

